;; emacs -*- mode: emacs-lisp; -*-
;; -------------------------------------------------------
(add-to-list 'load-path "~/.emacs.d/ew")
(add-to-list 'load-path "~/.emacs.d/elpa/org-9.1.13")
(add-to-list 'load-path "~/.emacs.d/elpa/ivy-0.10.0")
;; -------------------------------------------------------
(load "/usr/share/emacs/site-lisp/site-gentoo")
;; -------------------------------------------------------
(require 'uniquify)
(require 'htmlize)
(require 'gud)
(require 'package)
(require 'ox-twbs)
(require 'org-bullets)
(require 'flymake)
(require 'ox-reveal)
(require 'org-manage)
;; -------------------------------------------------------
(require 'ivy)
(require 'counsel)
(require 'swiper)
(ivy-mode 1)
(counsel-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; -------------------------------------------------------
(load "show-wspace")
(load "url") (url-handler-mode t)
(load "ewmodeline")
(load "ew-find-file-recursively")
(load "ew-org-mode")
(load "ew-org-same-window")
(load "ew-tog-ded")
(load "ew-gnus")
;; -------------------------------------------------------
(tool-bar-mode -1)
(show-paren-mode t)
(line-number-mode 1)
(column-number-mode 1)
(global-font-lock-mode t)
(global-auto-revert-mode 1)
(put 'downcase-region 'disabled nil)
;; -------------------------------------------------------
(setq buffers-menu-max-size nil)
(setq default-major-mode 'text-mode)
(setq exec-path (append exec-path '("/usr/local/texlive/2018/bin")))
(setq font-lock-maximum-decoration t)
(setq inhibit-splash-screen t)
(setq large-file-warning-threshold 50000000)
(setq lpr-command "xpp")
(setq make-backup-files nil)
(setq mouse-buffer-menu-mode-mult 0)
(setq next-line-add-newlines nil)
(setq org-manage-directory-org "~/org")
(setq org-reveal-root "https://org.westbrook.io/revealjs")
;; (setq org-reveal-title-slide 'auto)
(setq org-reveal-title-slide nil)
(setq ps-lpr-command "xpp")
(setq require-final-newline t)
(setq scroll-step 1)
(setq-default transient-mark-mode t) 
(setq uniquify-buffer-name-style 'post-forward)
(setq user-mail-address "eric@westbrook.io")
(setq user-full-name "Eric Westbrook")
;; (setq browse-url-browser-function 'browse-url-generic)
(setq browse-url-browser-function 'browse-url-firefox)
(setq browse-url-new-window-flag  t)
(setq browse-url-firefox-new-window-is-tab t)
;; -------------------------------------------------------
(setq-default indent-tabs-mode nil)
(setq default-tab-width 2)
(setq column-number-mode t)
(setq default-tab-width 2)
(setq standard-indent 2)
(setq lua-indent-level 2)
;; (setq lua-indent-level 4)
(setq javascript-indent-level 2)
(setq js-indent-level 2)
(setq tab-width 2)
(setq c-basic-offset 2)
(setq cperl-indent-level 2)
;; -------------------------------------------------------
(set-fill-column 57)
(set-cursor-color "Red")
(set-mouse-color "Yellow")
(set-foreground-color "#A6A376")
(set-background-color "#181818")
(set-default-font
 "-misc-fixed-medium-r-semicondensed--13-*-*-*-*-*-*-*")
;; (set-default-font "Ubuntu Mono 9")
;; -------------------------------------------------------
(add-to-list 'same-window-regexps "\*eshell\*")
(add-to-list 'same-window-regexps "\*shell\*")
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
;; -------------------------------------------------------
(defun no-split-window () (interactive) nil)
(setq split-window-preferred-function 'no-split-window)
;; -------------------------------------------------------
(setq vc-handled-backends nil)
(add-to-list 'vc-handled-backends 'CVS)
(add-to-list 'vc-handled-backends 'RCS)
(add-to-list 'vc-handled-backends 'SVN)
(add-to-list 'vc-handled-backends 'GIT)
;; -------------------------------------------------------
;; git
(add-to-list 'load-path "/usr/share/emacs/site-lisp/git")
(autoload 'git-status "git"
  "Entry point into git-status mode." t)
(autoload 'git-blame-mode "git-blame"
  "Minor mode for incremental blame for Git." t)
;; -------------------------------------------------------
;; sh
(defun ew-setup-sh-mode ()
  "EW prefs for sh-mode"
  (interactive)
  (setq sh-basic-offset 2
        sh-indentation 2))
(add-hook 'sh-mode-hook 'ew-setup-sh-mode)
;; -------------------------------------------------------
;; c
(setq c-offsets-alist
      '((case-label . +)
        (statement-case-intro . +)))
;; -------------------------------------------------------
;; tramp
(setq tramp-default-method "ssh")
;; -------------------------------------------------------
;; elpa
;; (add-to-list
;;  'package-archives
;;  '("org" . "http://orgmode.org/elpa/") t)
;; -------------------------------------------------------
;; perl
(defalias 'perl-mode 'cperl-mode)
;; -------------------------------------------------------
;; flymake
;; (setq help-at-pt-display-when-idle
;;       (quote (flymake-overlay)) nil (help-at-pt))
;; (setq help-at-pt-timer-delay 0.5)
;; -------------------------------------------------------
;; magit
(setq magit-status-buffer-switch-function 'switch-to-buffer)
(load "magit-filenotify") ;; in emacs.d/ew/
;; -------------------------------------------------------
;; lua
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
(defadvice magit-ediff (around flymake-off activate)
  (remove-hook 'lua-mode-hook' lua-flymake-hooks)
  ad-do-it
  (add-hook 'lua-mode-hook' lua-flymake-hooks))
;; -------------------------------------------------------
;; clipboard
(defun ew-toggle-clipboard-mode ()
  "Toggle variable x-select-enable-clipboard"
  (interactive) 
  (if (eq x-select-enable-clipboard 't) 
      (setq x-select-enable-clipboard nil)
    (setq x-select-enable-clipboard 't))
  (message "x-select-enable-clipboard is now %s" x-select-enable-clipboard))
(setq x-select-enable-clipboard nil)
;; -------------------------------------------------------
;; local autosaves
(defun make-auto-save-file-name ()
  "Return file name to use for auto-saves of current buffer.."
  (if buffer-file-name
      (if (file-exists-p "~/.emacs_autosaves/") 
          (concat (expand-file-name "~/.emacs_autosaves/") "#"
                  (replace-regexp-in-string "/" "!" buffer-file-name)
                  "#") 
        (concat
         (file-name-directory buffer-file-name)
         "#"
         (file-name-nondirectory buffer-file-name)
         "#"))
    (expand-file-name
     (concat "#%" (buffer-name) "#"))))
;; -------------------------------------------------------
;; keys
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>"  ) 'enlarge-window)
(global-set-key (kbd "C-M-g"     ) 'grep)
;; (global-set-key [f7] 'my-compile)
(global-set-key (kbd"<f5>"    ) 'gud-cont)
;; (global-set-key (kbd"<f6>") 'gud-break)
(global-set-key (kbd"<f7>"    ) 'gud-finish)
(global-set-key (kbd"<f8>"    ) 'gud-next)
(global-set-key (kbd"<f9>"    ) 'gud-watch)
(global-set-key (kbd"<f10>"   ) 'gud-step)
(global-set-key (kbd "M-s b"  ) 'ediff-buffers)
(global-set-key (kbd "M-s v"  ) 'ediff-revision)
(global-set-key (kbd "M-p"    ) 'ew-toggle-clipboard-mode)
(global-set-key (kbd "C-+"    ) 'text-scale-increase)
(global-set-key (kbd "C--"    ) 'text-scale-decrease)
(global-set-key (kbd "M-S-SPC") 'set-mark)
(global-set-key [pause] 'toggle-current-window-dedication)
;; -------------------------------------------------------
(defface org-default-mono '((t :family "Ubuntu Mono"))
  "Face used for monospaced things"
  :group 'org-faces)
;; -------------------------------------------------------
(defface org-ew-l1 '((t :height 1.4))
  "Face used for level 1 things"
  :group 'org-faces)
;; -------------------------------------------------------
(defface org-ew-l2 '((t :height 1.2))
  "Face used for level 2 things"
  :group 'org-faces)
;; -------------------------------------------------------
(defface org-ew-l3 '((t :height 1.1))
  "Face used for level 3 things"
  :group 'org-faces)
;; -------------------------------------------------------
(defface org-ew-block '((t :height 0.8))
  "Face used for block things"
  :group 'org-faces)
;; -------------------------------------------------------
(defface org-ew-shadow '((t :foreground "grey70"))
  "Face used for shadowey business"
  :group 'org-faces)
;; -------------------------------------------------------
(defface org-ew-mono-shadow
  '((t :foreground "grey70"
       :family "Ubuntu Mono"))
  "Face used for mono shadowey business"
  :group 'org-faces)
;; -------------------------------------------------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-default ((t (:inherit default :family "Ubuntu"))))
 '(org-level-1 ((t (:inherit (outline-1 org-ew-l1 org-default)))))
 '(org-level-2 ((t (:inherit (outline-2 org-ew-l2 org-default)))))
 '(org-level-3 ((t (:inherit (outline-3 org-ew-l3 org-default)))))
 '(org-level-4 ((t (:inherit (outline-4 org-default)))))
 '(org-level-5 ((t (:inherit (outline-5 org-default)))))
 '(org-level-6 ((t (:inherit (outline-6 org-default)))))
 '(org-level-7 ((t (:inherit (outline-7 org-default)))))
 '(org-level-8 ((t (:inherit (outline-8 org-default)))))
 '(org-link ((t (:inherit (link org-default)))))
 '(org-verbatim ((t (:inherit (org-ew-mono-shadow)))))
 '(org-block-begin-line ((t (:inherit (org-meta-line org-ew-block org-default)))))
 )
