;;; dot-emacs -- Summary
;;; Commentary:
;;; Code:
;; -------------------------------------------------------
(package-initialize)
(add-to-list 'load-path "~/.emacs.d/ew")
(add-to-list 'load-path "/git/magit/lisp")
(add-to-list 'load-path "/git/magit-popup")
(add-to-list 'load-path "~/.emacs.d/elpa/org-9.1.13")
(add-to-list 'load-path "~/.emacs.d/elpa/ivy-0.10.0")
(add-to-list 'load-path "/git/rjsx-mode")
(add-to-list 'load-path "/git/ob-http")
(add-to-list 'load-path "/git/s.el")
(add-to-list 'load-path "/git/web-mode")
(add-to-list 'load-path "/git/php-mode")
(add-to-list 'load-path "/git/flycheck")
(add-to-list 'load-path "/git/markdown-mode")
(add-to-list 'load-path "/git/emacs-htmlize")
(add-to-list 'load-path "/git/python-mode")
;; -------------------------------------------------------
(load "/usr/share/emacs/site-lisp/site-gentoo")
;; -------------------------------------------------------
(require 'uniquify)
;; (require 'htmlize)
(require 'gud)
(require 'package)
;; -------------------------------------------------------
(require 'ivy)
(require 'counsel)
(require 'swiper)
;; (require 'notmuch)
;; -------------------------------------------------------
(ivy-mode 1)
(counsel-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers nil)
;; -------------------------------------------------------
(require 'rjsx-mode)
(add-to-list 'auto-mode-alist '("\\.js$" . rjsx-mode))
;; -------------------------------------------------------
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(defun ew-web-mode-hook ()
  "EW hooks for web-mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-indent-style 2))
(add-hook 'web-mode-hook 'ew-web-mode-hook)
;; (setq ew-web-moders
;;       '("\\.phtml\\'"
;;         "\\.tpl\\.php\\'"
;;         "\\.html\\.twig\\'"
;;         "\\.html?\\'"))
;; (setq moders ew-web-moders)
;; (while moders
;;   (setq moder (car moders))
;;   (add-to-list 'auto-mode-alist moder)
;;   (setq moders (cdr moders)))
;; -------------------------------------------------------
(load "ew-dired")
(load "ew-ediff")
(load "ew-faces")
(load "ew-find-file-recursively")
(load "ew-gnus")
(load "ew-lua-mode")
(load "ew-magit")
(load "ew-org-mode")
(load "ew-tog-ded")
(load "ewmodeline")
(load "show-wspace")
(load "url") (url-handler-mode t)
;; (autoload 'notmuch "notmuch" "notmuch mail" t)
;; -------------------------------------------------------
(tool-bar-mode -1)
(show-paren-mode t)
(line-number-mode 1)
(column-number-mode 1)
(global-font-lock-mode t)
(global-auto-revert-mode 1)
(put 'downcase-region 'disabled nil)
;; -------------------------------------------------------
(setq buffers-menu-max-size nil)
(setq default-major-mode 'text-mode)
(setq exec-path (append exec-path '("/usr/local/texlive/2018/bin")))
(setq font-lock-maximum-decoration t)
(setq inhibit-splash-screen t)
(setq large-file-warning-threshold 50000000)
(setq lpr-command "xpp")
(setq make-backup-files nil)
(setq mouse-buffer-menu-mode-mult 0)
(setq next-line-add-newlines nil)
(setq ps-lpr-command "xpp")
(setq require-final-newline t)
(setq scroll-step 1)
(setq-default transient-mark-mode t)
(setq uniquify-buffer-name-style 'post-forward)
(setq user-mail-address "eric@westbrook.io")
(setq user-full-name "Eric Westbrook")
;; (setq browse-url-browser-function 'browse-url-generic)
(setq browse-url-browser-function 'browse-url-firefox)
(setq browse-url-new-window-flag  t)
(setq browse-url-firefox-new-window-is-tab t)
;; -------------------------------------------------------
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
(setq default-tab-width 2)
(setq column-number-mode t)
(setq default-tab-width 2)
(setq standard-indent 2)
(setq javascript-indent-level 2)
(setq js-indent-level 2)
(setq css-indent-offset 2)
(setq c-basic-offset 2)
(setq cperl-indent-level 2)
(setq tex-indent-arg 2)
;; -------------------------------------------------------
(set-default-coding-systems 'utf-8)
;; -------------------------------------------------------
(set-fill-column 57)
(set-cursor-color "Red")
(set-mouse-color "Yellow")
(set-foreground-color "#A6A376")
(set-background-color "#181818")
;; check with (face-attribute 'default :font)
(set-default-font "-misc-fixed-medium-r-semicondensed--13-*-*-*-*-*-*-*")
;; (set-default-font "WenQuanYi Zen Hei Mono 12")

;; (set-default-font "Fixed 9")

(set-default-font "Ubuntu Mono 9")
;; (set-default-font "Ubuntu Mono 10")
;; (set-default-font "Ubuntu Mono 12")
;; (set-default-font "Ubuntu Mono 14")
;; (set-default-font "Roboto Mono 12")
;; (set-default-font "LMMono12 10")
;; (set-default-font "LMMonoCaps10 8")

;; (set-default-font "LMMonoLtCond10 12")
;; (set-default-font "Latin Modern Mono Light Cond 13")
;; (set-default-font "Mitra Mono 9")
;; -------------------------------------------------------
(add-to-list 'same-window-regexps "\*eshell\*")
(add-to-list 'same-window-regexps "\*shell\*")
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
;; -------------------------------------------------------
(add-hook 'after-init-hook 'global-company-mode)
;; -------------------------------------------------------
(defun no-split-window ()
  "Function for preference of not splitting window."
  (interactive) nil)
(setq split-window-preferred-function 'no-split-window)
;; -------------------------------------------------------
(setq vc-handled-backends nil)
(add-to-list 'vc-handled-backends 'CVS)
(add-to-list 'vc-handled-backends 'RCS)
(add-to-list 'vc-handled-backends 'SVN)
(add-to-list 'vc-handled-backends 'GIT)
;; -------------------------------------------------------
;; git
(add-to-list 'load-path "/usr/share/emacs/site-lisp/git")
(autoload 'git-status "git"
  "Entry point into git-status mode." t)
(autoload 'git-blame-mode "git-blame"
  "Minor mode for incremental blame for Git." t)
;; -------------------------------------------------------
;; sh
(defun ew-setup-sh-mode ()
  "EW shell prefs."
  (interactive)
  (setq sh-basic-offset 2
        sh-indentation 2))
(add-hook 'sh-mode-hook 'ew-setup-sh-mode)
;; -------------------------------------------------------
;; c
(setq c-offsets-alist
      '((case-label . +)
        (statement-case-intro . +)))
;; -------------------------------------------------------
;; tramp
(setq tramp-default-method "ssh")
;; -------------------------------------------------------
;; perl
(defalias 'perl-mode 'cperl-mode)
;; -------------------------------------------------------
;; python
(setq py-keep-windows-configuration t)
(add-hook 'python-mode-hook
          '(lambda ()
             (setq python-guess-indent nil)
             (setq python-indent 2)
             (setq py-indent-offset 2)))
;; -------------------------------------------------------
;; flycheck REPLACES flymake
(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
;; -------------------------------------------------------
;; markdown-mode
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist
             '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist
             '("\\.md\\'" . markdown-mode))
;; ----------------------
(autoload 'gfm-mode "markdown-mode"
  "Major mode for GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist
             '("README\\.md\\'" . gfm-mode))
;; -------------------------------------------------------
;; clipboard
(defun ew-toggle-clipboard-mode ()
  "Toggle clipboard mode."
  (interactive)
  (if (eq x-select-enable-clipboard 't)
      (setq x-select-enable-clipboard nil)
    (setq x-select-enable-clipboard 't))
  (message "x-select-enable-clipboard is now %s" x-select-enable-clipboard))
(setq x-select-enable-clipboard nil)
;; -------------------------------------------------------
;; local autosaves
(defun make-auto-save-file-name ()
  "Return file name to use for auto-saves of current buffer.."
  (if buffer-file-name
      (if (file-exists-p "~/.emacs_autosaves/")
          (concat (expand-file-name "~/.emacs_autosaves/") "#"
                  (replace-regexp-in-string "/" "!" buffer-file-name)
                  "#")
        (concat
         (file-name-directory buffer-file-name)
         "#"
         (file-name-nondirectory buffer-file-name)
         "#"))
    (expand-file-name
     (concat "#%" (buffer-name) "#"))))
;; -------------------------------------------------------
;; keys
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
(global-set-key "\C-xg" 'magit-status)
(global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>"  ) 'enlarge-window)
(global-set-key (kbd "C-M-g"     ) 'grep)
;; (global-set-key [f7] 'my-compile)
(global-set-key (kbd"<f5>"    ) 'gud-cont)
;; (global-set-key (kbd"<f6>") 'gud-break)
(global-set-key (kbd"<f7>"    ) 'gud-finish)
(global-set-key (kbd"<f8>"    ) 'gud-next)
(global-set-key (kbd"<f9>"    ) 'gud-watch)
(global-set-key (kbd"<f10>"   ) 'gud-step)
(global-set-key (kbd "M-s b"  ) 'ediff-buffers)
(global-set-key (kbd "M-s v"  ) 'ediff-revision)
(global-set-key (kbd "M-p"    ) 'ew-toggle-clipboard-mode)
(global-set-key (kbd "C-+"    ) 'text-scale-increase)
(global-set-key (kbd "C--"    ) 'text-scale-decrease)
(global-set-key (kbd "M-S-SPC") 'set-mark)
(global-set-key [pause] 'toggle-current-window-dedication)
;; -------------------------------------------------------
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (company js2-mode org ivy))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
;; -------------------------------------------------------
;; Local Variables:
;; mode: emacs-lisp
;; End:
(provide 'dot-emacs)
;;; dot-emacs ends here
